'use strict';

var memoize = require('lodash.memoize');

var CONTAINER = document.createElement('div');

function addRanges(lines, ranges) {
  var result = [];

  for (var l = 0; l < lines.length; l++) {
    var line = lines[l];
    var res = '';

    var currentLine = l;
    var currentColumn = 0;

    CONTAINER.innerHTML = line;

    var nodes = CONTAINER.childNodes;

    for (var n = 0; n < nodes.length; n++) {
      var node = nodes[n];
      var chars = node.textContent;

      var openTag = void 0;
      var closeTag = void 0;

      if (node.tagName) {
        closeTag = '</' + node.tagName + '>';

        var closingHTML = node.innerHTML + closeTag;
        var index = node.outerHTML.length - closingHTML.length;

        openTag = node.outerHTML.slice(0, index);
      }

      if (openTag) {
        res += openTag;
      }

      for (var c = 0; c < chars.length; c++) {
        var char = chars[c];
        var matched = false;

        currentColumn++;

        for (var r = 0; r < ranges.length; r++) {
          var range = ranges[r];

          var startLine = range[0][0];
          var startColumn = range[0][1];
          var endLine = range[1][0];
          var endColumn = range[1][1];

          var afterStart = currentLine > startLine || currentLine === startLine && currentColumn > startColumn;

          var beforeEnd = currentLine < endLine || currentLine === endLine && currentColumn <= endColumn;

          if (afterStart && beforeEnd) {
            matched = true;
            break;
          }
        }

        if (matched) res += '<span class="highlight-char">';
        res += char;
        if (matched) res += '</span>';
      }

      if (closeTag) {
        res += closeTag;
      }
    }

    result.push(res);
  }

  return result;
}

module.exports = memoize(addRanges, function (lines, ranges) {
  return JSON.stringify({ lines: lines, ranges: ranges });
});